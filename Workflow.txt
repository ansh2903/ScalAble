AGENDA:

Make a text to sql interface utilizing a LLM (not yet determined) 
to create the queries from the user's input. show the queries to the
user for assessment and evaluation, editing as well if needed before
running the query on the actual database. after the execution the result
is showcased to the user along with various integrate visualizations as
per the user's needs and preferences. streamlining the entire database
experience in a fast, efficient and user-friendly manner.

PHASE 1: Core Project Structure

1- Setup the github{environment}
    - new environment
    - setup.py
    - requirements.txt

2- Src folder and build the package
    - connectors: Handle DB connections (MongoDB, MySQL, Oracle, etc)
    - core: Central logic or shared utilities
    - interface: Web and Desktop app UI logic (PyQt5 or tinker)
    - pipeline: NLP + query + result orchestration
    - engine: Query execution and visualization
    - Config files, constants, schema cache

PHASE 2: Finalizing frameworks, packages and optimize layout

    - Backend: Flask
    - Frontend: Flask templates + Bootstrap + Plotly
    - Database: MongoDB(first), later MySQL, Oracle
    - NLP/AI: Local LLMs via Ollama(spider 2, Deepseek R1)
    - Models: transformers + tokenizer + Spider-style LLMs
    - Data: pandas, plotly, json

PHASE 3: MVP

    - step 1: flask app entry point
    - step 2: flask routes
    - step 3: templates
    - step 4: pipeline
    - step 5: visualizer